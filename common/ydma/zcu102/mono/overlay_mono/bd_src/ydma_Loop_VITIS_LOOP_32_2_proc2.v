// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ydma_Loop_VITIS_LOOP_32_2_proc2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        num_total_cnt_dout,
        num_total_cnt_num_data_valid,
        num_total_cnt_fifo_cap,
        num_total_cnt_empty_n,
        num_total_cnt_read,
        output1_dout,
        output1_num_data_valid,
        output1_fifo_cap,
        output1_empty_n,
        output1_read,
        m_axi_aximm1_AWVALID,
        m_axi_aximm1_AWREADY,
        m_axi_aximm1_AWADDR,
        m_axi_aximm1_AWID,
        m_axi_aximm1_AWLEN,
        m_axi_aximm1_AWSIZE,
        m_axi_aximm1_AWBURST,
        m_axi_aximm1_AWLOCK,
        m_axi_aximm1_AWCACHE,
        m_axi_aximm1_AWPROT,
        m_axi_aximm1_AWQOS,
        m_axi_aximm1_AWREGION,
        m_axi_aximm1_AWUSER,
        m_axi_aximm1_WVALID,
        m_axi_aximm1_WREADY,
        m_axi_aximm1_WDATA,
        m_axi_aximm1_WSTRB,
        m_axi_aximm1_WLAST,
        m_axi_aximm1_WID,
        m_axi_aximm1_WUSER,
        m_axi_aximm1_ARVALID,
        m_axi_aximm1_ARREADY,
        m_axi_aximm1_ARADDR,
        m_axi_aximm1_ARID,
        m_axi_aximm1_ARLEN,
        m_axi_aximm1_ARSIZE,
        m_axi_aximm1_ARBURST,
        m_axi_aximm1_ARLOCK,
        m_axi_aximm1_ARCACHE,
        m_axi_aximm1_ARPROT,
        m_axi_aximm1_ARQOS,
        m_axi_aximm1_ARREGION,
        m_axi_aximm1_ARUSER,
        m_axi_aximm1_RVALID,
        m_axi_aximm1_RREADY,
        m_axi_aximm1_RDATA,
        m_axi_aximm1_RLAST,
        m_axi_aximm1_RID,
        m_axi_aximm1_RFIFONUM,
        m_axi_aximm1_RUSER,
        m_axi_aximm1_RRESP,
        m_axi_aximm1_BVALID,
        m_axi_aximm1_BREADY,
        m_axi_aximm1_BRESP,
        m_axi_aximm1_BID,
        m_axi_aximm1_BUSER,
        v1_buffer_V_dout,
        v1_buffer_V_num_data_valid,
        v1_buffer_V_fifo_cap,
        v1_buffer_V_empty_n,
        v1_buffer_V_read,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_state2 = 73'd2;
parameter    ap_ST_fsm_state3 = 73'd4;
parameter    ap_ST_fsm_state4 = 73'd8;
parameter    ap_ST_fsm_state5 = 73'd16;
parameter    ap_ST_fsm_state6 = 73'd32;
parameter    ap_ST_fsm_state7 = 73'd64;
parameter    ap_ST_fsm_state8 = 73'd128;
parameter    ap_ST_fsm_state9 = 73'd256;
parameter    ap_ST_fsm_state10 = 73'd512;
parameter    ap_ST_fsm_state11 = 73'd1024;
parameter    ap_ST_fsm_state12 = 73'd2048;
parameter    ap_ST_fsm_state13 = 73'd4096;
parameter    ap_ST_fsm_state14 = 73'd8192;
parameter    ap_ST_fsm_state15 = 73'd16384;
parameter    ap_ST_fsm_state16 = 73'd32768;
parameter    ap_ST_fsm_state17 = 73'd65536;
parameter    ap_ST_fsm_state18 = 73'd131072;
parameter    ap_ST_fsm_state19 = 73'd262144;
parameter    ap_ST_fsm_state20 = 73'd524288;
parameter    ap_ST_fsm_state21 = 73'd1048576;
parameter    ap_ST_fsm_state22 = 73'd2097152;
parameter    ap_ST_fsm_state23 = 73'd4194304;
parameter    ap_ST_fsm_state24 = 73'd8388608;
parameter    ap_ST_fsm_state25 = 73'd16777216;
parameter    ap_ST_fsm_state26 = 73'd33554432;
parameter    ap_ST_fsm_state27 = 73'd67108864;
parameter    ap_ST_fsm_state28 = 73'd134217728;
parameter    ap_ST_fsm_state29 = 73'd268435456;
parameter    ap_ST_fsm_state30 = 73'd536870912;
parameter    ap_ST_fsm_state31 = 73'd1073741824;
parameter    ap_ST_fsm_state32 = 73'd2147483648;
parameter    ap_ST_fsm_state33 = 73'd4294967296;
parameter    ap_ST_fsm_state34 = 73'd8589934592;
parameter    ap_ST_fsm_state35 = 73'd17179869184;
parameter    ap_ST_fsm_state36 = 73'd34359738368;
parameter    ap_ST_fsm_state37 = 73'd68719476736;
parameter    ap_ST_fsm_state38 = 73'd137438953472;
parameter    ap_ST_fsm_state39 = 73'd274877906944;
parameter    ap_ST_fsm_state40 = 73'd549755813888;
parameter    ap_ST_fsm_state41 = 73'd1099511627776;
parameter    ap_ST_fsm_state42 = 73'd2199023255552;
parameter    ap_ST_fsm_state43 = 73'd4398046511104;
parameter    ap_ST_fsm_state44 = 73'd8796093022208;
parameter    ap_ST_fsm_state45 = 73'd17592186044416;
parameter    ap_ST_fsm_state46 = 73'd35184372088832;
parameter    ap_ST_fsm_state47 = 73'd70368744177664;
parameter    ap_ST_fsm_state48 = 73'd140737488355328;
parameter    ap_ST_fsm_state49 = 73'd281474976710656;
parameter    ap_ST_fsm_state50 = 73'd562949953421312;
parameter    ap_ST_fsm_state51 = 73'd1125899906842624;
parameter    ap_ST_fsm_state52 = 73'd2251799813685248;
parameter    ap_ST_fsm_state53 = 73'd4503599627370496;
parameter    ap_ST_fsm_state54 = 73'd9007199254740992;
parameter    ap_ST_fsm_state55 = 73'd18014398509481984;
parameter    ap_ST_fsm_state56 = 73'd36028797018963968;
parameter    ap_ST_fsm_state57 = 73'd72057594037927936;
parameter    ap_ST_fsm_state58 = 73'd144115188075855872;
parameter    ap_ST_fsm_state59 = 73'd288230376151711744;
parameter    ap_ST_fsm_state60 = 73'd576460752303423488;
parameter    ap_ST_fsm_state61 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 73'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 73'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 73'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 73'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 73'd4722366482869645213696;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] num_total_cnt_dout;
input  [2:0] num_total_cnt_num_data_valid;
input  [2:0] num_total_cnt_fifo_cap;
input   num_total_cnt_empty_n;
output   num_total_cnt_read;
input  [63:0] output1_dout;
input  [2:0] output1_num_data_valid;
input  [2:0] output1_fifo_cap;
input   output1_empty_n;
output   output1_read;
output   m_axi_aximm1_AWVALID;
input   m_axi_aximm1_AWREADY;
output  [63:0] m_axi_aximm1_AWADDR;
output  [0:0] m_axi_aximm1_AWID;
output  [31:0] m_axi_aximm1_AWLEN;
output  [2:0] m_axi_aximm1_AWSIZE;
output  [1:0] m_axi_aximm1_AWBURST;
output  [1:0] m_axi_aximm1_AWLOCK;
output  [3:0] m_axi_aximm1_AWCACHE;
output  [2:0] m_axi_aximm1_AWPROT;
output  [3:0] m_axi_aximm1_AWQOS;
output  [3:0] m_axi_aximm1_AWREGION;
output  [0:0] m_axi_aximm1_AWUSER;
output   m_axi_aximm1_WVALID;
input   m_axi_aximm1_WREADY;
output  [63:0] m_axi_aximm1_WDATA;
output  [7:0] m_axi_aximm1_WSTRB;
output   m_axi_aximm1_WLAST;
output  [0:0] m_axi_aximm1_WID;
output  [0:0] m_axi_aximm1_WUSER;
output   m_axi_aximm1_ARVALID;
input   m_axi_aximm1_ARREADY;
output  [63:0] m_axi_aximm1_ARADDR;
output  [0:0] m_axi_aximm1_ARID;
output  [31:0] m_axi_aximm1_ARLEN;
output  [2:0] m_axi_aximm1_ARSIZE;
output  [1:0] m_axi_aximm1_ARBURST;
output  [1:0] m_axi_aximm1_ARLOCK;
output  [3:0] m_axi_aximm1_ARCACHE;
output  [2:0] m_axi_aximm1_ARPROT;
output  [3:0] m_axi_aximm1_ARQOS;
output  [3:0] m_axi_aximm1_ARREGION;
output  [0:0] m_axi_aximm1_ARUSER;
input   m_axi_aximm1_RVALID;
output   m_axi_aximm1_RREADY;
input  [63:0] m_axi_aximm1_RDATA;
input   m_axi_aximm1_RLAST;
input  [0:0] m_axi_aximm1_RID;
input  [8:0] m_axi_aximm1_RFIFONUM;
input  [0:0] m_axi_aximm1_RUSER;
input  [1:0] m_axi_aximm1_RRESP;
input   m_axi_aximm1_BVALID;
output   m_axi_aximm1_BREADY;
input  [1:0] m_axi_aximm1_BRESP;
input  [0:0] m_axi_aximm1_BID;
input  [0:0] m_axi_aximm1_BUSER;
input  [63:0] v1_buffer_V_dout;
input  [9:0] v1_buffer_V_num_data_valid;
input  [9:0] v1_buffer_V_fifo_cap;
input   v1_buffer_V_empty_n;
output   v1_buffer_V_read;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg num_total_cnt_read;
reg output1_read;
reg m_axi_aximm1_AWVALID;
reg[63:0] m_axi_aximm1_AWADDR;
reg[0:0] m_axi_aximm1_AWID;
reg[31:0] m_axi_aximm1_AWLEN;
reg[2:0] m_axi_aximm1_AWSIZE;
reg[1:0] m_axi_aximm1_AWBURST;
reg[1:0] m_axi_aximm1_AWLOCK;
reg[3:0] m_axi_aximm1_AWCACHE;
reg[2:0] m_axi_aximm1_AWPROT;
reg[3:0] m_axi_aximm1_AWQOS;
reg[3:0] m_axi_aximm1_AWREGION;
reg[0:0] m_axi_aximm1_AWUSER;
reg m_axi_aximm1_WVALID;
reg m_axi_aximm1_BREADY;
reg v1_buffer_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    num_total_cnt_blk_n;
reg    output1_blk_n;
reg    aximm1_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    aximm1_blk_n_B;
wire    ap_CS_fsm_state73;
reg   [31:0] num_total_cnt_read_reg_125;
reg   [60:0] trunc_ln_reg_131;
wire   [30:0] trunc_ln29_fu_95_p1;
reg   [30:0] trunc_ln29_reg_137;
wire   [30:0] select_ln32_fu_104_p3;
reg   [30:0] select_ln32_reg_142;
wire    ap_CS_fsm_state2;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_start;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_done;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_idle;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_ready;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_v1_buffer_V_read;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWVALID;
wire   [63:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWADDR;
wire   [0:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWID;
wire   [31:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWLEN;
wire   [2:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWSIZE;
wire   [1:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWBURST;
wire   [1:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWLOCK;
wire   [3:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWCACHE;
wire   [2:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWPROT;
wire   [3:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWQOS;
wire   [3:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWREGION;
wire   [0:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWUSER;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WVALID;
wire   [63:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WDATA;
wire   [7:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WSTRB;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WLAST;
wire   [0:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WID;
wire   [0:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WUSER;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARVALID;
wire   [63:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARADDR;
wire   [0:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARID;
wire   [31:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARLEN;
wire   [2:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARSIZE;
wire   [1:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARBURST;
wire   [1:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARLOCK;
wire   [3:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARCACHE;
wire   [2:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARPROT;
wire   [3:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARQOS;
wire   [3:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARREGION;
wire   [0:0] grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARUSER;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_RREADY;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_BREADY;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_ext_blocking_n;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_str_blocking_n;
wire    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_int_blocking_n;
reg    grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire  signed [63:0] sext_ln32_fu_111_p1;
wire   [31:0] zext_ln32_fu_121_p1;
reg    ap_block_state1;
wire   [0:0] icmp_ln32_fu_99_p2;
reg   [72:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
reg    ap_ST_fsm_state73_blk;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 73'd1;
#0 grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_start_reg = 1'b0;
end

ydma_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2 grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_start),
    .ap_done(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_done),
    .ap_idle(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_idle),
    .ap_ready(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_ready),
    .v1_buffer_V_dout(v1_buffer_V_dout),
    .v1_buffer_V_num_data_valid(10'd0),
    .v1_buffer_V_fifo_cap(10'd0),
    .v1_buffer_V_empty_n(v1_buffer_V_empty_n),
    .v1_buffer_V_read(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_v1_buffer_V_read),
    .m_axi_aximm1_AWVALID(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWVALID),
    .m_axi_aximm1_AWREADY(m_axi_aximm1_AWREADY),
    .m_axi_aximm1_AWADDR(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWADDR),
    .m_axi_aximm1_AWID(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWID),
    .m_axi_aximm1_AWLEN(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWLEN),
    .m_axi_aximm1_AWSIZE(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWSIZE),
    .m_axi_aximm1_AWBURST(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWBURST),
    .m_axi_aximm1_AWLOCK(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWLOCK),
    .m_axi_aximm1_AWCACHE(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWCACHE),
    .m_axi_aximm1_AWPROT(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWPROT),
    .m_axi_aximm1_AWQOS(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWQOS),
    .m_axi_aximm1_AWREGION(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWREGION),
    .m_axi_aximm1_AWUSER(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWUSER),
    .m_axi_aximm1_WVALID(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WVALID),
    .m_axi_aximm1_WREADY(m_axi_aximm1_WREADY),
    .m_axi_aximm1_WDATA(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WDATA),
    .m_axi_aximm1_WSTRB(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WSTRB),
    .m_axi_aximm1_WLAST(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WLAST),
    .m_axi_aximm1_WID(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WID),
    .m_axi_aximm1_WUSER(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WUSER),
    .m_axi_aximm1_ARVALID(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARVALID),
    .m_axi_aximm1_ARREADY(1'b0),
    .m_axi_aximm1_ARADDR(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARADDR),
    .m_axi_aximm1_ARID(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARID),
    .m_axi_aximm1_ARLEN(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARLEN),
    .m_axi_aximm1_ARSIZE(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARSIZE),
    .m_axi_aximm1_ARBURST(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARBURST),
    .m_axi_aximm1_ARLOCK(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARLOCK),
    .m_axi_aximm1_ARCACHE(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARCACHE),
    .m_axi_aximm1_ARPROT(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARPROT),
    .m_axi_aximm1_ARQOS(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARQOS),
    .m_axi_aximm1_ARREGION(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARREGION),
    .m_axi_aximm1_ARUSER(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_ARUSER),
    .m_axi_aximm1_RVALID(1'b0),
    .m_axi_aximm1_RREADY(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_RREADY),
    .m_axi_aximm1_RDATA(64'd0),
    .m_axi_aximm1_RLAST(1'b0),
    .m_axi_aximm1_RID(1'd0),
    .m_axi_aximm1_RFIFONUM(9'd0),
    .m_axi_aximm1_RUSER(1'd0),
    .m_axi_aximm1_RRESP(2'd0),
    .m_axi_aximm1_BVALID(m_axi_aximm1_BVALID),
    .m_axi_aximm1_BREADY(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_BREADY),
    .m_axi_aximm1_BRESP(m_axi_aximm1_BRESP),
    .m_axi_aximm1_BID(m_axi_aximm1_BID),
    .m_axi_aximm1_BUSER(m_axi_aximm1_BUSER),
    .sext_ln32(trunc_ln_reg_131),
    .num_total_cnt_load(num_total_cnt_read_reg_125),
    .ap_ext_blocking_n(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_str_blocking_n),
    .ap_int_blocking_n(grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state73) & (m_axi_aximm1_BVALID == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_start_reg <= 1'b1;
        end else if ((grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_ready == 1'b1)) begin
            grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_total_cnt_read_reg_125 <= num_total_cnt_dout;
        trunc_ln29_reg_137 <= trunc_ln29_fu_95_p1;
        trunc_ln_reg_131 <= {{output1_dout[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln32_reg_142 <= select_ln32_fu_104_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((num_total_cnt_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (output1_empty_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((m_axi_aximm1_AWREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

always @ (*) begin
    if ((grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

always @ (*) begin
    if ((m_axi_aximm1_BVALID == 1'b0)) begin
        ap_ST_fsm_state73_blk = 1'b1;
    end else begin
        ap_ST_fsm_state73_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (m_axi_aximm1_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (m_axi_aximm1_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state5 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        aximm1_blk_n_AW = m_axi_aximm1_AWREADY;
    end else begin
        aximm1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        aximm1_blk_n_B = m_axi_aximm1_BVALID;
    end else begin
        aximm1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_aximm1_AWREADY == 1'b1))) begin
        m_axi_aximm1_AWADDR = sext_ln32_fu_111_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWADDR = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWADDR;
    end else begin
        m_axi_aximm1_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWBURST = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWBURST;
    end else begin
        m_axi_aximm1_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWCACHE = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWCACHE;
    end else begin
        m_axi_aximm1_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWID = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWID;
    end else begin
        m_axi_aximm1_AWID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_aximm1_AWREADY == 1'b1))) begin
        m_axi_aximm1_AWLEN = zext_ln32_fu_121_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWLEN = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWLEN;
    end else begin
        m_axi_aximm1_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWLOCK = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWLOCK;
    end else begin
        m_axi_aximm1_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWPROT = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWPROT;
    end else begin
        m_axi_aximm1_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWQOS = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWQOS;
    end else begin
        m_axi_aximm1_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWREGION = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWREGION;
    end else begin
        m_axi_aximm1_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWSIZE = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWSIZE;
    end else begin
        m_axi_aximm1_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWUSER = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWUSER;
    end else begin
        m_axi_aximm1_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_aximm1_AWREADY == 1'b1))) begin
        m_axi_aximm1_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_AWVALID = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_AWVALID;
    end else begin
        m_axi_aximm1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (m_axi_aximm1_BVALID == 1'b1))) begin
        m_axi_aximm1_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_BREADY = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_BREADY;
    end else begin
        m_axi_aximm1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_aximm1_WVALID = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WVALID;
    end else begin
        m_axi_aximm1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_total_cnt_blk_n = num_total_cnt_empty_n;
    end else begin
        num_total_cnt_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((num_total_cnt_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (output1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_total_cnt_read = 1'b1;
    end else begin
        num_total_cnt_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output1_blk_n = output1_empty_n;
    end else begin
        output1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((num_total_cnt_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (output1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output1_read = 1'b1;
    end else begin
        output1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v1_buffer_V_read = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_v1_buffer_V_read;
    end else begin
        v1_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((num_total_cnt_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (output1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (m_axi_aximm1_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (m_axi_aximm1_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

always @ (*) begin
    ap_block_state1 = ((num_total_cnt_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (output1_empty_n == 1'b0));
end

assign ap_ext_blocking_cur_n = (aximm1_blk_n_B & aximm1_blk_n_AW);

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & ap_ext_blocking_cur_n);

assign ap_int_blocking_cur_n = (output1_blk_n & num_total_cnt_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_start = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_ap_start_reg;

assign icmp_ln32_fu_99_p2 = (($signed(num_total_cnt_read_reg_125) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign m_axi_aximm1_ARADDR = 64'd0;

assign m_axi_aximm1_ARBURST = 2'd0;

assign m_axi_aximm1_ARCACHE = 4'd0;

assign m_axi_aximm1_ARID = 1'd0;

assign m_axi_aximm1_ARLEN = 32'd0;

assign m_axi_aximm1_ARLOCK = 2'd0;

assign m_axi_aximm1_ARPROT = 3'd0;

assign m_axi_aximm1_ARQOS = 4'd0;

assign m_axi_aximm1_ARREGION = 4'd0;

assign m_axi_aximm1_ARSIZE = 3'd0;

assign m_axi_aximm1_ARUSER = 1'd0;

assign m_axi_aximm1_ARVALID = 1'b0;

assign m_axi_aximm1_RREADY = 1'b0;

assign m_axi_aximm1_WDATA = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WDATA;

assign m_axi_aximm1_WID = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WID;

assign m_axi_aximm1_WLAST = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WLAST;

assign m_axi_aximm1_WSTRB = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WSTRB;

assign m_axi_aximm1_WUSER = grp_Loop_VITIS_LOOP_32_2_proc2_Pipeline_VITIS_LOOP_32_2_fu_75_m_axi_aximm1_WUSER;

assign select_ln32_fu_104_p3 = ((icmp_ln32_fu_99_p2[0:0] == 1'b1) ? trunc_ln29_reg_137 : 31'd0);

assign sext_ln32_fu_111_p1 = $signed(trunc_ln_reg_131);

assign trunc_ln29_fu_95_p1 = num_total_cnt_dout[30:0];

assign zext_ln32_fu_121_p1 = select_ln32_reg_142;

endmodule //ydma_Loop_VITIS_LOOP_32_2_proc2
